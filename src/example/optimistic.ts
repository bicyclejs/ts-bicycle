// generated by ts-bicycle
// do not edit by hand

import {GetOptimisticValue} from 'bicycle/typed-helpers/optimistic';
import * as ScalarTypes from './scalar-types';

export {GetOptimisticValue};

export interface PersonOptimisticUpdaters {
  set?: (mutation: {objectName: 'Person'; methodName: 'set'; args: {"field": string, "value": string}}, cache: RootCache, getOptimisticValue: GetOptimisticValue) => any
}
export interface PersonCache {
  get(name: "id"): void | number;
  get(name: "name"): void | (null | string);
  get(name: "friends"): void | PersonCache[];
  get(name: "enemies"): void | PersonCache[];
  set(name: "id", value: number): this;
  set(name: "name", value: (null | string)): this;
  set(name: "friends", value: PersonCache[]): this;
  set(name: "enemies", value: PersonCache[]): this;
}
export interface RootOptimisticUpdaters {
}
export interface RootCache {
  get(name: "people"): void | PersonCache[];
  get(name: "person", args: number): void | PersonCache;
  get(name: "peopleByEmail", args: ScalarTypes.Email): void | PersonCache[];
  set(name: "people", value: PersonCache[]): this;
  set(name: "person", args: number, value: PersonCache): this;
  set(name: "peopleByEmail", args: ScalarTypes.Email, value: PersonCache[]): this;
  getObject(typeName: 'Person', id: string): PersonCache;
}
export default interface OptimisticUpdaters {
  Person?: PersonOptimisticUpdaters;
  Root?: RootOptimisticUpdaters;
}