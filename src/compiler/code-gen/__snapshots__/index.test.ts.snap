// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compile client 1`] = `
"// generated by ts-bicycle
// do not edit by hand


import Client from 'bicycle/typed-helpers/client';
import OptimisticUpdates from './optimistic';

export default class TypedClient extends Client<OptimisticUpdates> {}
"
`;

exports[`compile optimistic 1`] = `
"// generated by ts-bicycle
// do not edit by hand

import {GetOptimisticValue} from 'bicycle/client/optimistic';
import * as ScalarTypes from './scalar-types';

export {GetOptimisticValue};

export interface InviteOptimisticUpdaters {
}
export interface InviteCache {
}
export interface PersonOptimisticUpdaters {
  set?: (mutation: {objectName: 'Person'; methodName: 'set'; args: {\\"field\\": string, \\"value\\": string}}, cache: RootCache, getOptimisticValue: GetOptimisticValue) => any
}
export interface PersonCache {
  get(name: \\"id\\"): void | number;
  get(name: \\"name\\"): void | (null | string);
  get(name: \\"friends\\"): void | PersonCache[];
  get(name: \\"enemies\\"): void | PersonCache[];
  get(name: \\"objectWithOptionalProperty\\"): void | {\\"foo\\"?: string};
  get(name: \\"enumField\\"): void | ScalarTypes.MyEnum;
  get(name: \\"anyField\\"): void | any;
  set(name: \\"id\\", value: number): this;
  set(name: \\"name\\", value: (null | string)): this;
  set(name: \\"friends\\", value: PersonCache[]): this;
  set(name: \\"enemies\\", value: PersonCache[]): this;
  set(name: \\"objectWithOptionalProperty\\", value: {\\"foo\\"?: string}): this;
  set(name: \\"enumField\\", value: ScalarTypes.MyEnum): this;
  set(name: \\"anyField\\", value: any): this;
}
export interface RootOptimisticUpdaters {
}
export interface RootCache {
  get(name: \\"people\\"): void | PersonCache[];
  get(name: \\"person\\", args: number): void | PersonCache;
  get(name: \\"peopleByEmail\\", args: ScalarTypes.Email): void | PersonCache[];
  get(name: \\"page\\"): void | ScalarTypes.RichText;
  set(name: \\"people\\", value: PersonCache[]): this;
  set(name: \\"person\\", args: number, value: PersonCache): this;
  set(name: \\"peopleByEmail\\", args: ScalarTypes.Email, value: PersonCache[]): this;
  set(name: \\"page\\", value: ScalarTypes.RichText): this;
  getObject(typeName: 'Invite', id: string): InviteCache;
  getObject(typeName: 'Person', id: string): PersonCache;
}
export default interface OptimisticUpdaters {
  Invite?: InviteOptimisticUpdaters;
  Person?: PersonOptimisticUpdaters;
  Root?: RootOptimisticUpdaters;
}"
`;

exports[`compile query 1`] = `
"// generated by ts-bicycle
// do not edit by hand

import {getType} from 'bicycle/typed-helpers/query';
import * as QueryTypes from './query-types';

export {getType};

export const Invite = new QueryTypes.InviteQuery<{}>({});
export const Person = new QueryTypes.PersonQuery<{}>({});
export const Root = new QueryTypes.RootQuery<{}>({});
"
`;

exports[`compile query-types 1`] = `
"// generated by ts-bicycle
// do not edit by hand

import {BaseQuery, merge, addField, Mutation, BaseRootQuery, stringify} from 'bicycle/typed-helpers/query';
import * as ScalarTypes from './scalar-types';
import {RootCache, GetOptimisticValue} from './optimistic';

export class InviteQuery<TResult = {}> extends BaseQuery<TResult> {
  // fields

  merge<TOther>(other: InviteQuery<TOther>): InviteQuery<TResult & TOther> {
    return new InviteQuery(merge(this._query, other._query));
  }

  // mutations
}
export class PersonQuery<TResult = {}> extends BaseQuery<TResult> {
  // fields
  get id(): PersonQuery<TResult & {id: number}> {
    return new PersonQuery(addField(this._query, \\"id\\", true));
  }
  get name(): PersonQuery<TResult & {name: (null | string)}> {
    return new PersonQuery(addField(this._query, \\"name\\", true));
  }
  friends<TPerson>(Person: PersonQuery<TPerson>): PersonQuery<TResult & {friends: TPerson[]}> {
    return new PersonQuery(addField(this._query, \\"friends\\", (Person as any)._query));
  }
  enemies<TPerson>(Person: PersonQuery<TPerson>): PersonQuery<TResult & {enemies: TPerson[]}> {
    return new PersonQuery(addField(this._query, \\"enemies\\", (Person as any)._query));
  }
  get objectWithOptionalProperty(): PersonQuery<TResult & {objectWithOptionalProperty: {\\"foo\\"?: string}}> {
    return new PersonQuery(addField(this._query, \\"objectWithOptionalProperty\\", true));
  }
  get enumField(): PersonQuery<TResult & {enumField: ScalarTypes.MyEnum}> {
    return new PersonQuery(addField(this._query, \\"enumField\\", true));
  }
  get anyField(): PersonQuery<TResult & {anyField: any}> {
    return new PersonQuery(addField(this._query, \\"anyField\\", true));
  }

  merge<TOther>(other: PersonQuery<TOther>): PersonQuery<TResult & TOther> {
    return new PersonQuery(merge(this._query, other._query));
  }

  // mutations
  set(args: {\\"field\\": string, \\"value\\": string}, optimisticUpdate?: (mutation: {objectName: 'Person'; methodName: 'set'; args: {\\"field\\": string, \\"value\\": string}}, cache: RootCache, getOptimisticValue: GetOptimisticValue) => any): Mutation<void> {
    return new Mutation(\\"Person.set\\", args, optimisticUpdate as any);
  }
}
export class RootQuery<TResult = {}> extends BaseRootQuery<TResult> {
  // fields
  people<TPerson>(Person: PersonQuery<TPerson>): RootQuery<TResult & {people: TPerson[]}> {
    return new RootQuery(addField(this._query, \\"people\\", (Person as any)._query));
  }
  person<TPerson>(args: number, Person: PersonQuery<TPerson>): RootQuery<TResult & {person: TPerson}> {
    return new RootQuery(addField(this._query, args === undefined ? \\"person\\" : \\"person(\\" + stringify(args) + ')', (Person as any)._query));
  }
  peopleByEmail<TPerson>(args: ScalarTypes.Email, Person: PersonQuery<TPerson>): RootQuery<TResult & {peopleByEmail: TPerson[]}> {
    return new RootQuery(addField(this._query, args === undefined ? \\"peopleByEmail\\" : \\"peopleByEmail(\\" + stringify(args) + ')', (Person as any)._query));
  }
  get page(): RootQuery<TResult & {page: ScalarTypes.RichText}> {
    return new RootQuery(addField(this._query, \\"page\\", true));
  }

  merge<TOther>(other: RootQuery<TOther>): RootQuery<TResult & TOther> {
    return new RootQuery(merge(this._query, other._query));
  }

  // mutations
}"
`;

exports[`compile scalar-types 1`] = `
"// generated by ts-bicycle
// do not edit by hand

import Email from './scalars/Email';
import RichText from './scalars/RichText';
import {EmailBrand} from './scalars/Email'
import MyEnum from './scalars/MyEnum'

export {Email};
export {RichText};
export {EmailBrand};
export {MyEnum};
"
`;

exports[`compile server 1`] = `
"// generated by ts-bicycle
// do not edit by hand

import Schema, {} from 'bicycle/types/Schema';
import SchemaKind, {} from 'bicycle/types/SchemaKind';
import QueryContext, {} from 'bicycle/types/QueryContext';
import Query, {} from 'bicycle/types/Query';
import * as ScalarTypes from './scalar-types';
import MutationContext, {} from 'bicycle/types/MutationContext';
import BicycleServer, {Options} from 'bicycle/server-core';
import Invite from './objects/Other';
import Person from './objects/Person';
import {Root} from './objects/Root';
import {validateEmail} from './scalars/Email';
import {validate as validateRichText} from './scalars/RichText';
import _Context0 from './Context';

// root never has any actual data, so we create one reusable instance
const root = new Root({});
const schema: Schema<_Context0> = {
  Invite: {
    kind: SchemaKind.NodeType,
    name: \\"Invite\\",
    description: undefined,
    id(obj: Invite, ctx: _Context0, qCtx: QueryContext<_Context0>): string {
      return '' + obj.data.id;
    },
    matches(obj: any): obj is Invite {
      return obj instanceof Invite;
    },
    fields: {

    },
    mutations: {

    },
  },
  Person: {
    kind: SchemaKind.NodeType,
    name: \\"Person\\",
    description: undefined,
    id(obj: Person, ctx: _Context0, qCtx: QueryContext<_Context0>): string {
      return '' + obj.data.id;
    },
    matches(obj: any): obj is Person {
      return obj instanceof Person;
    },
    fields: {
      id: {
        kind: SchemaKind.FieldMethod,
        name: \\"id\\",
        description: undefined,
        resultType: ({\\"kind\\":\\"Number\\",\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Person.ts\\",\\"line\\":12}} as any),
        argType: {kind: SchemaKind.Void},
        auth: 'public',
        resolve(value: Person, args: void, context: _Context0, subQuery: true | Query, qCtx: QueryContext<_Context0>): number {
          return value.data.id;
        },
      },
      name: {
        kind: SchemaKind.FieldMethod,
        name: \\"name\\",
        description: undefined,
        resultType: ({\\"kind\\":\\"Union\\",\\"elements\\":[{\\"kind\\":\\"Null\\"},{\\"kind\\":\\"String\\"}],\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Person.ts\\",\\"line\\":13}} as any),
        argType: {kind: SchemaKind.Void},
        auth: 'public',
        resolve(value: Person, args: void, context: _Context0, subQuery: true | Query, qCtx: QueryContext<_Context0>): (null | string) {
          return value.data.name;
        },
      },
      anyField: {
        kind: SchemaKind.FieldMethod,
        name: \\"anyField\\",
        description: undefined,
        resultType: ({\\"kind\\":\\"Any\\",\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Person.ts\\",\\"line\\":50}} as any),
        argType: ({\\"kind\\":\\"Void\\"} as any),
        auth: 'public',
        resolve(value: Person, args: void, context: _Context0, subQuery: true | Query, qCtx: QueryContext<_Context0>): any | PromiseLike<any> {
          return value.anyField();
        },
      },
      enemies: {
        kind: SchemaKind.FieldMethod,
        name: \\"enemies\\",
        description: undefined,
        resultType: ({\\"kind\\":\\"List\\",\\"element\\":{\\"kind\\":\\"Named\\",\\"name\\":\\"Person\\"}} as any),
        argType: ({\\"kind\\":\\"Void\\",\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Person.ts\\",\\"line\\":37}} as any),
        auth(value: Person, args: void, context: _Context0, subQuery: true | Query, qCtx: QueryContext<_Context0>): boolean | PromiseLike<boolean> {
          return value.$isSelf(args, context);
        },
        resolve(value: Person, args: void, context: _Context0, subQuery: true | Query, qCtx: QueryContext<_Context0>): Person[] | PromiseLike<Person[]> {
          return value.enemies(args, context);
        },
      },
      enumField: {
        kind: SchemaKind.FieldMethod,
        name: \\"enumField\\",
        description: undefined,
        resultType: ({\\"kind\\":\\"Union\\",\\"elements\\":[{\\"kind\\":\\"Literal\\",\\"value\\":10},{\\"kind\\":\\"Literal\\",\\"value\\":20}],\\"enumDeclaration\\":\\"MyEnum\\",\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Person.ts\\",\\"line\\":46}} as any),
        argType: ({\\"kind\\":\\"Void\\"} as any),
        auth: 'public',
        resolve(value: Person, args: void, context: _Context0, subQuery: true | Query, qCtx: QueryContext<_Context0>): ScalarTypes.MyEnum | PromiseLike<ScalarTypes.MyEnum> {
          return value.enumField();
        },
      },
      friends: {
        kind: SchemaKind.FieldMethod,
        name: \\"friends\\",
        description: undefined,
        resultType: ({\\"kind\\":\\"List\\",\\"element\\":{\\"kind\\":\\"Named\\",\\"name\\":\\"Person\\"}} as any),
        argType: ({\\"kind\\":\\"Void\\",\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Person.ts\\",\\"line\\":32}} as any),
        auth(value: Person, args: void, context: _Context0, subQuery: true | Query, qCtx: QueryContext<_Context0>): boolean | PromiseLike<boolean> {
          return value.$isSelf(args, context);
        },
        resolve(value: Person, args: void, context: _Context0, subQuery: true | Query, qCtx: QueryContext<_Context0>): Person[] | PromiseLike<Person[]> {
          return value.friends(args, context);
        },
      },
      objectWithOptionalProperty: {
        kind: SchemaKind.FieldMethod,
        name: \\"objectWithOptionalProperty\\",
        description: undefined,
        resultType: ({\\"kind\\":\\"Object\\",\\"properties\\":{\\"foo\\":{\\"kind\\":\\"Union\\",\\"elements\\":[{\\"kind\\":\\"String\\",\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Person.ts\\",\\"line\\":43}},{\\"kind\\":\\"Void\\"}],\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Person.ts\\",\\"line\\":43},\\"isOptional\\":true}},\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Person.ts\\",\\"line\\":43}} as any),
        argType: ({\\"kind\\":\\"Void\\"} as any),
        auth: 'public',
        resolve(value: Person, args: void, context: _Context0, subQuery: true | Query, qCtx: QueryContext<_Context0>): {\\"foo\\"?: string} | PromiseLike<{\\"foo\\"?: string}> {
          return value.objectWithOptionalProperty();
        },
      },
    },
    mutations: {
      set: {
        kind: SchemaKind.Mutation,
        name: \\"set\\",
        description: undefined,
        resultType: ({\\"kind\\":\\"Void\\"} as any),
        argType: ({\\"kind\\":\\"Object\\",\\"properties\\":{\\"field\\":{\\"kind\\":\\"String\\",\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Person.ts\\",\\"line\\":58}},\\"value\\":{\\"kind\\":\\"String\\",\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Person.ts\\",\\"line\\":58}}},\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Person.ts\\",\\"line\\":58}} as any),
        auth: 'public',
        resolve(args: {\\"field\\": string, \\"value\\": string}, context: _Context0, mCtx: MutationContext<_Context0>): void | PromiseLike<void> {
          return Person.set(args, context);
        },
      },
    },
  },
  Root: {
    kind: SchemaKind.NodeType,
    name: \\"Root\\",
    description: undefined,
    id(): string {
      return \\"root\\";
    },
    matches(obj: any): obj is Root {
      return obj instanceof Root;
    },
    fields: {
      page: {
        kind: SchemaKind.FieldMethod,
        name: \\"page\\",
        description: undefined,
        resultType: ({\\"kind\\":\\"Named\\",\\"name\\":\\"RichText\\",\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Root.ts\\",\\"line\\":30}} as any),
        argType: ({\\"kind\\":\\"Void\\"} as any),
        auth: 'public',
        resolve(value: {}, args: void, context: _Context0, subQuery: true | Query, qCtx: QueryContext<_Context0>): ScalarTypes.RichText | PromiseLike<ScalarTypes.RichText> {
          return root.page();
        },
      },
      people: {
        kind: SchemaKind.FieldMethod,
        name: \\"people\\",
        description: undefined,
        resultType: ({\\"kind\\":\\"List\\",\\"element\\":{\\"kind\\":\\"Named\\",\\"name\\":\\"Person\\"}} as any),
        argType: ({\\"kind\\":\\"Void\\",\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Root.ts\\",\\"line\\":13}} as any),
        auth: 'public',
        resolve(value: {}, args: void, context: _Context0, subQuery: true | Query, qCtx: QueryContext<_Context0>): Person[] | PromiseLike<Person[]> {
          return root.people(args, context);
        },
      },
      peopleByEmail: {
        kind: SchemaKind.FieldMethod,
        name: \\"peopleByEmail\\",
        description: undefined,
        resultType: ({\\"kind\\":\\"List\\",\\"element\\":{\\"kind\\":\\"Named\\",\\"name\\":\\"Person\\"}} as any),
        argType: ({\\"kind\\":\\"Named\\",\\"name\\":\\"Email\\",\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Root.ts\\",\\"line\\":19}} as any),
        auth: 'public',
        resolve(value: {}, args: ScalarTypes.Email, context: _Context0, subQuery: true | Query, qCtx: QueryContext<_Context0>): Person[] | PromiseLike<Person[]> {
          return root.peopleByEmail(args, context);
        },
      },
      person: {
        kind: SchemaKind.FieldMethod,
        name: \\"person\\",
        description: undefined,
        resultType: ({\\"kind\\":\\"Named\\",\\"name\\":\\"Person\\"} as any),
        argType: ({\\"kind\\":\\"Number\\",\\"loc\\":{\\"fileName\\":\\"/src/example/objects/Root.ts\\",\\"line\\":16}} as any),
        auth: 'public',
        resolve(value: {}, args: number, context: _Context0, subQuery: true | Query, qCtx: QueryContext<_Context0>): Person | PromiseLike<Person> {
          return root.person(args, context);
        },
      },
    },
    mutations: {

    },
  },
  Email: {
    kind: SchemaKind.Scalar,
    name: \\"Email\\",
    description: undefined,
    baseType: ({\\"kind\\":\\"String\\",\\"loc\\":{\\"fileName\\":\\"/src/example/scalars/Email.ts\\",\\"line\\":7}} as any),
    validate: validateEmail,
  },
  RichText: {
    kind: SchemaKind.Scalar,
    name: \\"RichText\\",
    description: undefined,
    baseType: ({\\"kind\\":\\"Any\\"} as any),
    validate: validateRichText,
  },
};
export {Options};
export default class Server extends BicycleServer<_Context0> {
  constructor(options?: Options) {
    super(schema, options);
  }
}"
`;
