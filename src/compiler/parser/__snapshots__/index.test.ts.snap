// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse 1`] = `
Object {
  "classes": Object {
    "Invite": Object {
      "exportedName": "default",
      "idName": "id",
      "instanceAPI": Object {
        "auth": Object {},
        "authMethods": Object {},
        "methods": Object {},
        "properties": Object {
          "id": Object {
            "kind": "String",
            "loc": Object {
              "fileName": "/src/example/objects/Other.ts",
              "line": 3,
            },
          },
        },
      },
      "loc": Object {
        "fileName": "/src/example/objects/Other.ts",
        "line": 2,
      },
      "staticAPI": Object {
        "auth": Object {},
        "authMethods": Object {},
        "methods": Object {},
      },
    },
    "Person": Object {
      "exportedName": "default",
      "idName": "id",
      "instanceAPI": Object {
        "auth": Object {
          "anyField": "public",
          "enemies": "isSelf",
          "enumField": "public",
          "enumSubsetField": "public",
          "friends": "isSelf",
          "id": "public",
          "name": "public",
          "objectWithOptionalProperty": "public",
        },
        "authMethods": Object {
          "$isSelf": Object {
            "args": Object {
              "elements": Array [
                Object {
                  "kind": "Void",
                },
                Object {
                  "kind": "Object",
                  "properties": Object {},
                },
              ],
              "kind": "Union",
              "loc": Object {
                "fileName": "/src/example/objects/Person.ts",
                "line": 29,
              },
            },
            "length": 2,
            "name": "$isSelf",
            "result": Object {
              "kind": "Boolean",
              "loc": Object {
                "fileName": "/src/example/objects/Person.ts",
                "line": 29,
              },
            },
          },
        },
        "methods": Object {
          "anyField": Object {
            "args": Object {
              "kind": "Void",
            },
            "length": 0,
            "name": "anyField",
            "result": Object {
              "kind": "Any",
              "loc": Object {
                "fileName": "/src/example/objects/Person.ts",
                "line": 54,
              },
            },
          },
          "enemies": Object {
            "args": Object {
              "kind": "Void",
              "loc": Object {
                "fileName": "/src/example/objects/Person.ts",
                "line": 38,
              },
            },
            "length": 2,
            "name": "enemies",
            "result": Object {
              "kind": "Promise",
              "loc": Object {
                "fileName": "/src/example/objects/Person.ts",
                "line": 38,
              },
              "result": Object {
                "element": Object {
                  "kind": "Named",
                  "name": "Person",
                },
                "kind": "List",
              },
            },
          },
          "enumField": Object {
            "args": Object {
              "kind": "Void",
            },
            "length": 0,
            "name": "enumField",
            "result": Object {
              "elements": Array [
                Object {
                  "enumDeclaration": "MyEnum.a",
                  "kind": "Literal",
                  "value": 10,
                },
                Object {
                  "enumDeclaration": "MyEnum.b",
                  "kind": "Literal",
                  "value": 20,
                },
                Object {
                  "enumDeclaration": "MyEnum.c",
                  "kind": "Literal",
                  "value": 30,
                },
              ],
              "enumDeclaration": "MyEnum",
              "kind": "Union",
              "loc": Object {
                "fileName": "/src/example/objects/Person.ts",
                "line": 47,
              },
            },
          },
          "enumSubsetField": Object {
            "args": Object {
              "kind": "Void",
            },
            "length": 0,
            "name": "enumSubsetField",
            "result": Object {
              "elements": Array [
                Object {
                  "enumDeclaration": "MyEnum.a",
                  "kind": "Literal",
                  "value": 10,
                },
                Object {
                  "enumDeclaration": "MyEnum.b",
                  "kind": "Literal",
                  "value": 20,
                },
              ],
              "kind": "Union",
              "loc": Object {
                "fileName": "/src/example/objects/Person.ts",
                "line": 50,
              },
            },
          },
          "friends": Object {
            "args": Object {
              "kind": "Void",
              "loc": Object {
                "fileName": "/src/example/objects/Person.ts",
                "line": 33,
              },
            },
            "length": 2,
            "name": "friends",
            "result": Object {
              "kind": "Promise",
              "loc": Object {
                "fileName": "/src/example/objects/Person.ts",
                "line": 33,
              },
              "result": Object {
                "element": Object {
                  "kind": "Named",
                  "name": "Person",
                },
                "kind": "List",
              },
            },
          },
          "objectWithOptionalProperty": Object {
            "args": Object {
              "kind": "Void",
            },
            "length": 0,
            "name": "objectWithOptionalProperty",
            "result": Object {
              "kind": "Object",
              "loc": Object {
                "fileName": "/src/example/objects/Person.ts",
                "line": 44,
              },
              "properties": Object {
                "foo": Object {
                  "elements": Array [
                    Object {
                      "kind": "String",
                      "loc": Object {
                        "fileName": "/src/example/objects/Person.ts",
                        "line": 44,
                      },
                    },
                    Object {
                      "kind": "Void",
                    },
                  ],
                  "isOptional": true,
                  "kind": "Union",
                  "loc": Object {
                    "fileName": "/src/example/objects/Person.ts",
                    "line": 44,
                  },
                },
              },
            },
          },
        },
        "properties": Object {
          "id": Object {
            "kind": "Number",
            "loc": Object {
              "fileName": "/src/example/objects/Person.ts",
              "line": 12,
            },
          },
          "name": Object {
            "elements": Array [
              Object {
                "kind": "Null",
              },
              Object {
                "kind": "String",
              },
            ],
            "kind": "Union",
            "loc": Object {
              "fileName": "/src/example/objects/Person.ts",
              "line": 13,
            },
          },
        },
      },
      "loc": Object {
        "fileName": "/src/example/objects/Person.ts",
        "line": 16,
      },
      "staticAPI": Object {
        "auth": Object {
          "set": "public",
        },
        "authMethods": Object {},
        "methods": Object {
          "set": Object {
            "args": Object {
              "kind": "Object",
              "loc": Object {
                "fileName": "/src/example/objects/Person.ts",
                "line": 62,
              },
              "properties": Object {
                "field": Object {
                  "kind": "String",
                  "loc": Object {
                    "fileName": "/src/example/objects/Person.ts",
                    "line": 62,
                  },
                },
                "value": Object {
                  "kind": "String",
                  "loc": Object {
                    "fileName": "/src/example/objects/Person.ts",
                    "line": 62,
                  },
                },
              },
            },
            "length": 2,
            "name": "set",
            "result": Object {
              "kind": "Void",
            },
          },
        },
      },
    },
    "Root": Object {
      "exportedName": "Root",
      "idName": "id",
      "instanceAPI": Object {
        "auth": Object {
          "nullOrBooleanPromise": "public",
          "page": "public",
          "people": "public",
          "peopleByEmail": "public",
          "peopleByEmail2": "public",
          "person": "public",
          "someSpecificString": "public",
        },
        "authMethods": Object {},
        "methods": Object {
          "nullOrBooleanPromise": Object {
            "args": Object {
              "kind": "Void",
            },
            "length": 0,
            "name": "nullOrBooleanPromise",
            "result": Object {
              "kind": "Promise",
              "loc": Object {
                "fileName": "/src/example/objects/Root.ts",
                "line": 53,
              },
              "result": Object {
                "elements": Array [
                  Object {
                    "kind": "Null",
                  },
                  Object {
                    "kind": "Literal",
                    "value": true,
                  },
                  Object {
                    "kind": "Literal",
                    "value": false,
                  },
                ],
                "kind": "Union",
              },
            },
          },
          "page": Object {
            "args": Object {
              "kind": "Void",
            },
            "length": 0,
            "name": "page",
            "result": Object {
              "kind": "Named",
              "loc": Object {
                "fileName": "/src/example/objects/Root.ts",
                "line": 50,
              },
              "name": "RichText",
            },
          },
          "people": Object {
            "args": Object {
              "kind": "Void",
              "loc": Object {
                "fileName": "/src/example/objects/Root.ts",
                "line": 22,
              },
            },
            "length": 2,
            "name": "people",
            "result": Object {
              "kind": "Promise",
              "loc": Object {
                "fileName": "/src/example/objects/Root.ts",
                "line": 22,
              },
              "result": Object {
                "element": Object {
                  "kind": "Named",
                  "name": "Person",
                },
                "kind": "List",
              },
            },
          },
          "peopleByEmail": Object {
            "args": Object {
              "kind": "Named",
              "loc": Object {
                "fileName": "/src/example/objects/Root.ts",
                "line": 39,
              },
              "name": "Email",
            },
            "length": 2,
            "name": "peopleByEmail",
            "result": Object {
              "kind": "Promise",
              "loc": Object {
                "fileName": "/src/example/objects/Root.ts",
                "line": 39,
              },
              "result": Object {
                "element": Object {
                  "kind": "Named",
                  "name": "Person",
                },
                "kind": "List",
              },
            },
          },
          "peopleByEmail2": Object {
            "args": Object {
              "kind": "Named",
              "loc": Object {
                "fileName": "/src/example/objects/Root.ts",
                "line": 28,
              },
              "name": "Email2",
            },
            "length": 2,
            "name": "peopleByEmail2",
            "result": Object {
              "kind": "Promise",
              "loc": Object {
                "fileName": "/src/example/objects/Root.ts",
                "line": 28,
              },
              "result": Object {
                "element": Object {
                  "kind": "Named",
                  "name": "Person",
                },
                "kind": "List",
              },
            },
          },
          "person": Object {
            "args": Object {
              "kind": "Number",
              "loc": Object {
                "fileName": "/src/example/objects/Root.ts",
                "line": 25,
              },
            },
            "length": 2,
            "name": "person",
            "result": Object {
              "kind": "Promise",
              "loc": Object {
                "fileName": "/src/example/objects/Root.ts",
                "line": 25,
              },
              "result": Object {
                "kind": "Named",
                "name": "Person",
              },
            },
          },
          "someSpecificString": Object {
            "args": Object {
              "kind": "Void",
            },
            "length": 0,
            "name": "someSpecificString",
            "result": Object {
              "elements": Array [
                Object {
                  "kind": "Literal",
                  "value": "Hello",
                },
                Object {
                  "kind": "Literal",
                  "value": "World",
                },
              ],
              "kind": "Union",
              "loc": Object {
                "fileName": "/src/example/objects/Root.ts",
                "line": 56,
              },
            },
          },
        },
        "properties": Object {},
      },
      "loc": Object {
        "fileName": "/src/example/objects/Root.ts",
        "line": 9,
      },
      "staticAPI": Object {
        "auth": Object {},
        "authMethods": Object {},
        "methods": Object {},
      },
    },
  },
  "context": Array [
    Object {
      "exportName": "default",
      "fileName": "/src/example/Context",
    },
  ],
  "enums": Object {
    "EmailBrand": Object {
      "exportName": "EmailBrand",
      "location": Object {
        "fileName": "/src/example/scalars/Email.ts",
        "line": 1,
      },
      "name": "EmailBrand",
    },
    "MyEnum": Object {
      "exportName": "default",
      "location": Object {
        "fileName": "/src/example/scalars/MyEnum.ts",
        "line": 1,
      },
      "name": "MyEnum",
    },
  },
  "programFiles": Array [
    "/node_modules/@types/body-parser/index.d.ts",
    "/node_modules/@types/concat-stream/index.d.ts",
    "/node_modules/@types/connect/index.d.ts",
    "/node_modules/@types/cuid/index.d.ts",
    "/node_modules/@types/deep-freeze/index.d.ts",
    "/node_modules/@types/events/index.d.ts",
    "/node_modules/@types/express-serve-static-core/index.d.ts",
    "/node_modules/@types/express/index.d.ts",
    "/node_modules/@types/form-data/index.d.ts",
    "/node_modules/@types/jest/index.d.ts",
    "/node_modules/@types/leven/index.d.ts",
    "/node_modules/@types/mime/index.d.ts",
    "/node_modules/@types/mkdirp/index.d.ts",
    "/node_modules/@types/ms/index.d.ts",
    "/node_modules/@types/node/index.d.ts",
    "/node_modules/@types/qs/index.d.ts",
    "/node_modules/@types/range-parser/index.d.ts",
    "/node_modules/@types/react-dom/index.d.ts",
    "/node_modules/@types/react/global.d.ts",
    "/node_modules/@types/react/index.d.ts",
    "/node_modules/@types/serve-static/index.d.ts",
    "/node_modules/bicycle/BaseObject.d.ts",
    "/node_modules/bicycle/CacheUpdateType.d.ts",
    "/node_modules/bicycle/Ctx.d.ts",
    "/node_modules/bicycle/client/OptimisticValue.d.ts",
    "/node_modules/bicycle/client/OptimisticValueStore.d.ts",
    "/node_modules/bicycle/client/index.d.ts",
    "/node_modules/bicycle/client/mutation.d.ts",
    "/node_modules/bicycle/client/optimistic.d.ts",
    "/node_modules/bicycle/network-layer.d.ts",
    "/node_modules/bicycle/server-core.d.ts",
    "/node_modules/bicycle/server-rendering.d.ts",
    "/node_modules/bicycle/sessions/SessionStore.d.ts",
    "/node_modules/bicycle/typed-helpers/client.d.ts",
    "/node_modules/bicycle/typed-helpers/query.d.ts",
    "/node_modules/bicycle/types/Cache.d.ts",
    "/node_modules/bicycle/types/ErrorResult.d.ts",
    "/node_modules/bicycle/types/Logging.d.ts",
    "/node_modules/bicycle/types/MutationContext.d.ts",
    "/node_modules/bicycle/types/MutationID.d.ts",
    "/node_modules/bicycle/types/MutationResult.d.ts",
    "/node_modules/bicycle/types/NetworkLayerInterface.d.ts",
    "/node_modules/bicycle/types/NodeID.d.ts",
    "/node_modules/bicycle/types/Query.d.ts",
    "/node_modules/bicycle/types/QueryContext.d.ts",
    "/node_modules/bicycle/types/Request.d.ts",
    "/node_modules/bicycle/types/Schema.d.ts",
    "/node_modules/bicycle/types/SchemaKind.d.ts",
    "/node_modules/bicycle/types/ServerPreparation.d.ts",
    "/node_modules/bicycle/types/ServerResponse.d.ts",
    "/node_modules/bicycle/types/SessionID.d.ts",
    "/node_modules/bicycle/types/SessionVersion.d.ts",
    "/node_modules/bicycle/types/ValueType.d.ts",
    "/node_modules/bicycle/utils/run-query-against-cache.d.ts",
    "/node_modules/csstype/index.d.ts",
    "/node_modules/http-basic/lib/CachedResponse.d.ts",
    "/node_modules/http-basic/lib/Headers.d.ts",
    "/node_modules/http-basic/lib/HttpVerb.d.ts",
    "/node_modules/http-basic/lib/ICache.d.ts",
    "/node_modules/http-response-object/lib/headers.d.ts",
    "/node_modules/http-response-object/lib/index.d.ts",
    "/node_modules/promise/index.d.ts",
    "/node_modules/then-request/lib/Options.d.ts",
    "/node_modules/then-request/lib/RequestFn.d.ts",
    "/node_modules/then-request/lib/ResponsePromise.d.ts",
    "/node_modules/then-request/lib/index.d.ts",
    "/node_modules/typescript/lib/lib.dom.d.ts",
    "/node_modules/typescript/lib/lib.es2015.collection.d.ts",
    "/node_modules/typescript/lib/lib.es2015.core.d.ts",
    "/node_modules/typescript/lib/lib.es2015.d.ts",
    "/node_modules/typescript/lib/lib.es2015.generator.d.ts",
    "/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
    "/node_modules/typescript/lib/lib.es2015.promise.d.ts",
    "/node_modules/typescript/lib/lib.es2015.proxy.d.ts",
    "/node_modules/typescript/lib/lib.es2015.reflect.d.ts",
    "/node_modules/typescript/lib/lib.es2015.symbol.d.ts",
    "/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
    "/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
    "/node_modules/typescript/lib/lib.es2016.d.ts",
    "/node_modules/typescript/lib/lib.es2017.d.ts",
    "/node_modules/typescript/lib/lib.es2017.intl.d.ts",
    "/node_modules/typescript/lib/lib.es2017.object.d.ts",
    "/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts",
    "/node_modules/typescript/lib/lib.es2017.string.d.ts",
    "/node_modules/typescript/lib/lib.es2017.typedarrays.d.ts",
    "/node_modules/typescript/lib/lib.es5.d.ts",
    "/src/example/Context.ts",
    "/src/example/client.ts",
    "/src/example/objects/Other.ts",
    "/src/example/objects/Person.ts",
    "/src/example/objects/Root.ts",
    "/src/example/optimistic.ts",
    "/src/example/query-types.ts",
    "/src/example/query.ts",
    "/src/example/scalar-types.ts",
    "/src/example/scalars/Email.ts",
    "/src/example/scalars/Email2.src.ts",
    "/src/example/scalars/Email2.ts",
    "/src/example/scalars/MyEnum.ts",
    "/src/example/scalars/RichText.src.ts",
    "/src/example/scalars/RichText.ts",
    "/src/example/server.ts",
  ],
  "scalars": Object {
    "Email": Object {
      "aliasLocation": Object {
        "fileName": "/src/example/scalars/Email.ts",
        "line": 6,
      },
      "brandName": "EmailBrand",
      "exportName": "default",
      "name": "Email",
      "type": Object {
        "kind": "String",
        "loc": Object {
          "fileName": "/src/example/scalars/Email.ts",
          "line": 7,
        },
      },
      "validatorLocation": Object {
        "fileName": "/src/example/scalars/Email.ts",
        "line": 6,
      },
      "validatorName": "validateEmail",
    },
    "Email2": Object {
      "aliasLocation": Object {
        "fileName": "/src/example/scalars/Email2.ts",
        "line": 11,
      },
      "brandName": "Email2",
      "exportName": "default",
      "name": "Email2",
      "type": Object {
        "kind": "String",
        "loc": Object {
          "fileName": "/src/example/scalars/Email2.ts",
          "line": 5,
        },
      },
      "validatorLocation": Object {
        "fileName": "/src/example/scalars/Email2.ts",
        "line": 11,
      },
      "validatorName": "default.isValid",
    },
    "RichText": Object {
      "aliasLocation": Object {
        "fileName": "/src/example/scalars/RichText.ts",
        "line": 11,
      },
      "brandName": "RichText",
      "exportName": "default",
      "name": "RichText",
      "type": Object {
        "kind": "Any",
        "loc": Object {
          "fileName": "/src/example/scalars/RichText.ts",
          "line": 5,
        },
      },
      "validatorLocation": Object {
        "fileName": "/src/example/scalars/RichText.ts",
        "line": 11,
      },
      "validatorName": "default.isValid",
    },
  },
}
`;
